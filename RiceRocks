import simplegui
import math
import random

# globals for user interface
WIDTH = 800
HEIGHT = 600
score = 0
lives = 3
time = 0
angle_vel_inc = 0.03
started = False
rock_group = set([])
missile_group = set([])

class ImageInfo:
    def __init__(self, center, size, radius = 0, lifespan = None, animated = False):
        self.center = center
        self.size = size
        self.radius = radius
        if lifespan:
            self.lifespan = lifespan
        else:
            self.lifespan = float('inf')
        self.animated = animated

    def get_center(self):
        return self.center

    def get_size(self):
        return self.size

    def get_radius(self):
        return self.radius

    def get_lifespan(self):
        return self.lifespan

    def get_animated(self):
        return self.animated

    
# art assets created by Kim Lathrop, may be freely re-used in non-commercial projects, please credit Kim
    
# debris images - debris1_brown.png, debris2_brown.png, debris3_brown.png, debris4_brown.png
#                 debris1_blue.png, debris2_blue.png, debris3_blue.png, debris4_blue.png, debris_blend.png
debris_info = ImageInfo([320, 240], [640, 480])
debris_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/debris2_blue.png")

# nebula images - nebula_brown.png, nebula_blue.png
nebula_info = ImageInfo([400, 300], [800, 600])
nebula_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/nebula_blue.f2014.png")

# splash image
splash_info = ImageInfo([200, 150], [400, 300])
splash_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/splash.png")

# ship image
ship_info = ImageInfo([45, 45], [90, 90], 35)
ship_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/double_ship.png")
thrusters_info = ImageInfo([135,45], [90, 90], 35)

# missile image - shot1.png, shot2.png, shot3.png
missile_info = ImageInfo([5,5], [10, 10], 3, 50)
missile_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/shot2.png")

# asteroid images - asteroid_blue.png, asteroid_brown.png, asteroid_blend.png
asteroid_info = ImageInfo([45, 45], [90, 90], 40)
asteroid_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/asteroid_blue.png")

# animated explosion - explosion_orange.png, explosion_blue.png, explosion_blue2.png, explosion_alpha.png
explosion_info = ImageInfo([64, 64], [128, 128], 17, 24, True)
explosion_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/explosion_alpha.png")

# sound assets purchased from sounddogs.com, please do not redistribute
soundtrack = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/soundtrack.mp3")
missile_sound = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/missile.mp3")
missile_sound.set_volume(.5)
ship_thrust_sound = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/thrust.mp3")
explosion_sound = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/explosion.mp3")

# alternative upbeat soundtrack by composer and former IIPP student Emiel Stopler
# please do not redistribute without permission from Emiel at http://www.filmcomposer.nl
#soundtrack = simplegui.load_sound("https://storage.googleapis.com/codeskulptor-assets/ricerocks_theme.mp3")

# helper functions to handle transformations
def angle_to_vector(ang):
    return [math.cos(ang), math.sin(ang)]

def dist(p,q):
    return math.sqrt((p[0] - q[0]) ** 2+(p[1] - q[1]) ** 2)

# Ship class
class Ship:
    def __init__(self, pos, vel, angle, image, info):
        self.pos = [pos[0],pos[1]]
        self.vel = [vel[0],vel[1]]
        self.thrust = False
        self.angle = angle
        self.angle_vel = 0
        self.image = image
        self.image_center = info.get_center()
        self.image_size = info.get_size()
        self.radius = info.get_radius()
        
    def draw(self,canvas):
        #canvas.draw_circle(self.pos, self.radius, 1, "White", "White")
        i = 0
        if self.thrust == True:
            i = 2
        else:
            i = 0
            
        # 45 is the center of the first image. so x2 to get second image, which is the image with thrust
        canvas.draw_image(self.image, [self.image_center[0] + (i*(45)), self.image_center[1]] , self.image_size, self.pos, [WIDTH // 8, HEIGHT// 8], self.angle)
        
    def update(self):
        global fwd_vector_multiplier
        if self.thrust == True:
            self.vel = angle_to_vector(self.angle)
        
        fwd_vector_multiplier = 1.8
        friction = 0.003
        
        self.vel[0] *= (1- friction)
        self.vel[1] *= (1- friction)
        
        self.pos[0] += self.vel[0] * fwd_vector_multiplier
        self.pos[1] += self.vel[1] * fwd_vector_multiplier
        self.angle += self.angle_vel
        
        # spaceship goes off bottom of screen
        if (self.pos[1]) // HEIGHT >= 1:
            self.pos[1] = 0
        # spaceship goes off top of screen
        elif self.pos[1] < 0:
            self.pos[1] = HEIGHT
        # spaceship goes off right of screen
        elif self.pos[0] // WIDTH >= 1:
            self.pos[0] = 0
        # spaceship goes off left of screen
        elif self.pos[0] < 0:
            self.pos[0] = WIDTH
    
    def inc_angle_vel(self):
        self.angle_vel += angle_vel_inc
        
    def dec_angle_vel(self):
        self.angle_vel -= angle_vel_inc
        
    def thrust_on(self):
        self.thrust = True   
        ship_thrust_sound.play()
        
    def thrust_off(self):
        self.thrust = False
        ship_thrust_sound.rewind()
        
    def shoot(self):
        dist = angle_to_vector(self.angle)
        cannon_pos = [self.pos[0] + dist[0] * self.radius, self.pos[1] + dist[1] * self.radius]
        missile_vel = [self.vel[0] + dist[0] * 5, self.vel[1] + dist[1] * 5]
        missile_group.add(Sprite(cannon_pos, missile_vel, self.angle, 0, missile_image, missile_info, missile_sound))	
    
    def get_position(self):
        return self.pos
    
    def get_radius(self):
        return self.radius
    
class Sprite:
    def __init__(self, pos, vel, ang, ang_vel, image, info, sound = None):
        self.pos = [pos[0],pos[1]]
        self.vel = [vel[0],vel[1]]
        self.angle = ang
        self.angle_vel = ang_vel
        self.image = image
        self.image_center = info.get_center()
        self.image_size = info.get_size()
        self.radius = info.get_radius()
        self.lifespan = info.get_lifespan()
        self.animated = info.get_animated()
        self.age = 0
        if sound:
            sound.rewind()
            sound.play()
   
    def draw(self, canvas):
        canvas.draw_image(self.image, self.image_center, self.image_size, self.pos, self.image_size, self.angle)
    
    def update(self):
        self.angle += self.angle_vel
        self.pos[0] += self.vel[0]
        self.pos[1] += self.vel[1]
        
        if (self.pos[1]) // (HEIGHT+self.radius) >= 1:
            self.pos[1] = 0
        # rock goes off top of screen
        elif self.pos[1] < -self.radius:
            self.pos[1] = HEIGHT
        # rock goes off right of screen
        elif self.pos[0] // (WIDTH + self.radius) >= 1:
            self.pos[0] = 0
        # rock goes off left of screen
        elif self.pos[0] < -self.radius:
            self.pos[0] = WIDTH
        
        self.age += 1
        return self.age > self.lifespan
            
    def get_position(self):
        return self.pos
    
    def get_radius(self):
        return self.radius
            
    def collide(self, other_object):
        return dist(self.get_position(), other_object.get_position()) <= (self.get_radius() + other_object.get_radius())

def draw(canvas):
    global time, lives, started
    
    time += 1
    wtime = (time / 4) % WIDTH
    center = debris_info.get_center()
    size = debris_info.get_size()
    canvas.draw_image(nebula_image, nebula_info.get_center(), nebula_info.get_size(), [WIDTH / 2, HEIGHT / 2], [WIDTH, HEIGHT])
    canvas.draw_image(debris_image, center, size, (wtime - WIDTH / 2, HEIGHT / 2), (WIDTH, HEIGHT))
    canvas.draw_image(debris_image, center, size, (wtime + WIDTH / 2, HEIGHT / 2), (WIDTH, HEIGHT))

    if lives <= 0:
        started = False
        soundtrack.rewind()
        
    # draw splash screen if not started
    if not started:
        canvas.draw_image(splash_image, splash_info.get_center(), 
                          splash_info.get_size(), [WIDTH / 2, HEIGHT / 2], 
                          splash_info.get_size())
    else:
        my_ship.draw(canvas)
        process_sprite_group(canvas, rock_group)

        if group_collide(rock_group, my_ship) == True:
            lives -= 1

        process_sprite_group(canvas, missile_group)
        for missile in missile_group:
            missile.draw(canvas)
            missile.update()
        group_group_collide(missile_group, rock_group)

        my_ship.update()

        canvas.draw_text('Lives: ' + str(lives), [WIDTH // 4, HEIGHT // 8], 25, 'white')
        canvas.draw_text('Score: ' + str(score), [WIDTH // 1.5, HEIGHT // 8], 25, 'white')
    
    
def rock_spawner():
    global rock_group
    rock_pos = [random.randrange(0, WIDTH), random.randrange(0, HEIGHT)]
    rock_vel = [random.randrange(-2,2), random.randrange(-2,2)]
    rock_angle_vel = random.choice([0.05, 0.06, 0.08, -0.05, -0.06, -0.08])
    if len(rock_group) < 8 :
        if dist(rock_pos, my_ship.get_position()) <= (my_ship.get_radius() + asteroid_info.get_radius()):
            # if rock spawn touches ship, ignore
            pass
        else:
            # else, spawn rock
            rock_group.add(Sprite(rock_pos, rock_vel, 0, rock_angle_vel, asteroid_image, asteroid_info))
    else:
        pass
    
def keydown_handler(key):
    if key == simplegui.KEY_MAP['left']:
        my_ship.dec_angle_vel()
    elif key == simplegui.KEY_MAP['right']:
        my_ship.inc_angle_vel()
    elif key == simplegui.KEY_MAP['up']:
        my_ship.thrust_on()
    elif key == simplegui.KEY_MAP['space']:
        my_ship.shoot()
    
def keyup_handler(key):
    if key == simplegui.KEY_MAP['left'] or key == simplegui.KEY_MAP['right']:
        my_ship.angle_vel = 0
    elif key == simplegui.KEY_MAP['up']:
        my_ship.thrust_off()
        
def click(pos):
    global started, lives, rock_group, missile_group, score
    lives = 3
    score = 0
    rock_group = set([])
    missile_group = set([])
    my_ship.pos = [WIDTH / 2, HEIGHT / 2]
    my_ship.vel = [0, 0]
    my_ship.angle = 0
    center = [WIDTH / 2, HEIGHT / 2]
    size = splash_info.get_size()
    inwidth = (center[0] - size[0] /2) < pos[0] < (center[0] + size[0] /2)
    inheight = (center[1] - size[1] / 2) < pos[1] < (center[1] + size[1] / 2)
    
    soundtrack.rewind()
    soundtrack.play()
    soundtrack.set_volume(1)
    if (not started) and inwidth and inheight:
        started = True

def process_sprite_group(canvas, sprite_group):
    remove_sprite = set([])
    for sprite in sprite_group:
        sprite.draw(canvas)
        if sprite.update() == True:
            remove_sprite.add(sprite)
    sprite_group.difference_update(remove_sprite)

def group_collide(sprite_group, other_object):
    # test if rocks collide with ship
    remove_set = set([])
    for sprite in sprite_group:
        if sprite.collide(other_object):
            remove_set.add(sprite)
        rock_group.difference_update(remove_set)

        if sprite.collide(other_object):
            return True

def group_group_collide(missiles_group, rocks_group):
    global score
    remove_missiles = set([])
    for missile in missiles_group:
        if group_collide(rocks_group, missile) == True:
            score += 1
            remove_missiles.add(missile)
    missiles_group.difference_update(remove_missiles)
        
# initialize frame
frame = simplegui.create_frame("Asteroids", WIDTH, HEIGHT)

# initialize ship and two sprites
my_ship = Ship([WIDTH / 2, HEIGHT / 2], [0, 0], 0, ship_image, ship_info)

# register handlers
frame.set_draw_handler(draw)
frame.set_keydown_handler(keydown_handler)
frame.set_keyup_handler(keyup_handler)
frame.set_mouseclick_handler(click)

timer = simplegui.create_timer(1000.0, rock_spawner)

timer.start()
frame.start()
